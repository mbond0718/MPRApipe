#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import glob
import shutil
import os

##### Load config and sample sheets #####
configfile: "config/configBCmap.yaml"

## Read in control fasta
control = config['control']

## Read in samplesheet
samples = pd.read_table(config["samplesheet"])

## Convert all columns to strings
samples = samples.astype(str)

## Concatenate columns to identify which groups to run (i.e. Seq_Rep will be run together)
samples['id'] = samples[config['mergeBy']].agg('_'.join, axis=1)

## Group by id and extract Read1 & Read2
read1 = samples.groupby('id')['Read1'].apply(list).to_dict()
read2 = samples.groupby('id')['Read2'].apply(list).to_dict()

## Use ID's as groups
groups = list(set(samples['id']))

## Concatenate the sequencing directory to Read1 and Read2 for full paths
samples['Read1'] = samples[['Sequencing_Directory', 'Read1']].apply(lambda row: os.path.join(*row), axis=1)
samples['Read2'] = samples[['Sequencing_Directory', 'Read2']].apply(lambda row: os.path.join(*row), axis=1)

 
## Define actions on success
onsuccess:
    ## Success message
    print("bcMapping workflow completed successfully!")

##### Define rules #####
rule all:
    input:
        [expand("bcMapOutput/{group}_mpra_ad_posneg.txt", group = id) for id in groups],
        #[expand("bcMapOutput/fastq/{group}_merged_R1.fastq", group = id) for id in groups],
        #[expand("bcMapOutput/fastq/{group}_merged_R2.fastq", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_merged_R1.fastq.gz", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_merged_R2.fastq.gz", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_merged.fastq", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_merged.txt", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_unmerged1.fastq", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_unmerged2.fastq", group = id) for id in groups],
        [expand("bcMapOutput/fastq/{group}_bcMap.txt", group = id) for id in groups],
        [expand("bcMapOutput/{group}_barcode.txt", group = id) for id in groups],
        [expand("bcMapOutput/{group}_bcdatBarcodesUniq.txt", group = id) for id in groups],
        [expand("bcMapOutput/{group}_bcdatBarcodesUniq_woN.txt", group = id) for id in groups],
        [expand("bcMapOutput/{group}_unique_bcdat.rda", group = id) for id in groups],
        [expand("bcMapOutput/ref/{group}.fasta", group = id) for id in groups],
        [expand("bcMapOutput/ref/{group}.saf", group = id) for id in groups]

        

rule selectControls:
   input:
        control = control
   output:
       txt = "bcMapOutput/{group}_mpra_ad_posneg.txt"
   log:
       err = "bcMapOutput/logs/{group}_posneg.err"
   shell:
        """
        module load r/4.2.2
        Rscript scripts/selecting_positive_negative_controls.R {input.control} {output.txt}
        """

rule mergeFastq: 
    input: 
        read1 = lambda wildcards: samples.loc[samples['id'] == wildcards.group]['Read1'],
        read2 = lambda wildcards: samples.loc[samples['id'] == wildcards.group]['Read2']
    output: 
        mergedRead1 = "bcMapOutput/fastq/{group}_merged_R1.fastq",
        mergedRead2 = "bcMapOutput/fastq/{group}_merged_R2.fastq"
    log:
        err = "bcMapOutput/logs/{group}_mergeFastq.err"
    shell:
        """
        zcat {input.read1} > {output.mergedRead1}
        zcat {input.read2} > {output.mergedRead2}
        """

rule zipFastq: 
    input: 
        mergedRead1 = rules.mergeFastq.output.mergedRead1,
        mergedRead2 = rules.mergeFastq.output.mergedRead2
    output: 
        zipRead1 = "bcMapOutput/fastq/{group}_merged_R1.fastq.gz",
        zipRead2 = "bcMapOutput/fastq/{group}_merged_R2.fastq.gz"
    log:
        err = "bcMapOutput/logs/{group}_zipFastq.err"
    shell:
        """
        gzip {input.mergedRead1}
        gzip {input.mergedRead2}
        """

rule bcMap:
   input:
        control = "bcMapOutput/{group}_mpra_ad_posneg.txt",
        mergedRead1 = rules.zipFastq.output.zipRead1,
        mergedRead2 = rules.zipFastq.output.zipRead2
   output:
       outputname = "bcMapOutput/fastq/{group}_merged.fastq",
       outputtxt = "bcMapOutput/fastq/{group}_merged.txt",
       unmerged1 = "bcMapOutput/fastq/{group}_unmerged1.fastq",
       unmerged2 = "bcMapOutput/fastq/{group}_unmerged2.fastq",
       bcmapname = "bcMapOutput/fastq/{group}_bcMap.txt",
       bcstats = "bcMapOutput/{group}_barcode_statistics.txt",
       varstats = "bcMapOutput/{group}_variant_statistics.txt",
       varpdf = "bcMapOutput/{group}_variant_statistics.pdf"
   log:
       err = "bcMapOutput/logs/{group}_bcMapping.err"
   shell:
        """
        module load r/4.2.2
        scripts/setup.sh
        module load python/2.7.12
        Rscript scripts/barcode_mapping.R {input.control} {input.mergedRead1} {input.mergedRead2} {output.outputname} {output.outputtxt} {output.unmerged1} {output.unmerged2} {output.bcmapname} {output.bcstats} {output.varstats} {output.varpdf}
        """

rule variantBarcodeMap:
   input:
        varstat = "bcMapOutput/{group}_variant_statistics.txt"
   output:
       bc = "bcMapOutput/{group}_barcode.txt",
       uniqbc = "bcMapOutput/{group}_bcdatBarcodesUniq.txt",
       uniqbcN = "bcMapOutput/{group}_bcdatBarcodesUniq_woN.txt",
       rda = "bcMapOutput/{group}_unique_bcdat.rda"
   log:
       err = "bcMapOutput/logs/{group}_variantBarcodeMap.err"
   shell:
        """
        module load r/4.2.1
        Rscript scripts/variant-barcode_map.R {input.varstat} {output.bc} {output.uniqbc} {output.uniqbcN} {output.rda}
        """

rule buildReference:
   input:
        rda = "bcMapOutput/{group}_unique_bcdat.rda"
   output:
       fasta = "bcMapOutput/ref/{group}.fasta",
       saf = "bcMapOutput/ref/{group}.saf"
   log:
       err = "bcMapOutput/logs/{group}_makeReference.err"
   shell:
        """
        module load r/4.2.2
        module load python/3.6.6
        Rscript scripts/reference_file.R {input.rda} {output.fasta} {output.saf}
        """